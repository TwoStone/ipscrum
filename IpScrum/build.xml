<?xml version="1.0" encoding="utf-8" ?>
<project name="IpScrum" default="build" basedir=".">

	<!-- Arguments to gwtc and devmode targets -->
	<property name="gwt.args" value="-logLevel ERROR" />

	<!-- Source encoding -->
	<property name="source.encoding" value="utf-8" />

	<!-- Source paths -->
	<property name="source.dir" value="${basedir}/src" />
	<property name="tests.dir" value="${basedir}/test" />

	<!-- Output paths -->
	<property name="source.output.dir" value="${basedir}/war/WEB-INF/classes" />
	<property name="tests.output.dir" value="${basedir}/test-classes" />
	<property name="coverage.output.dir" value="${basedir}/coverage-classes" />


	<!-- Paths for external libs and tools -->
	<property name="extern.dir" value="${basedir}/extern" />
	<property name="reports.dir" value="${basedir}/reports" />
	<property name="javadoc.dir" value="${basedir}/doc" />

	<!-- FindBugs paths -->
	<property name="findbugs.dir" value="${extern.dir}/findBugs" />
	<property name="findbugs.report.dir" value="${reports.dir}/findbugs" />
	<property name="findbugs.report.format" value="xml" />

	<!-- GWT path -->
	<property name="gwt.dir" value="${extern.dir}/gwt-2.3.0" />

	<!-- XmlMerge -->
	<property name="xmlmerge.dir" value="${extern.dir}/xmlmerge" />

	<!-- Coberture Code Coverage paths -->
	<property name="cobertura.dir" value="${extern.dir}/cobertura" />
	<property name="cobertura.report.dir" value="${reports.dir}/coverage" />
	<property name="cobertura.datafile" value="${coverage.output.dir}/cobertura.ser" />
	<property name="cobertura.report.format" value="xml" />

	<!-- Checkstyle paths -->
	<property name="checkstyle.dir" value="${extern.dir}/checkstyle" />
	<property name="checkstyle.report.dir" value="${reports.dir}/checkstyle" />
	<property name="checkstyle.config.dir" value="${basedir}/config" />
	<property name="checkstyle.report.format" value="xml" />

	<!-- jUnit paths -->
	<property name="junit.dir" value="${extern.dir}/junit" />
	<property name="junit.report.dir" value="${reports.dir}/junit" />
	<property name="junit.report.format" value="xml" />


	<!-- External classpath -->
	<path id="extern.classpath">
		<fileset dir="${extern.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="extern.cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>


	<path id="extern.jUnit.classpath">
		<fileset dir="${extern.dir}">
			<include name="**/junit/*.jar" />
		</fileset>
	</path>

	<!-- project classpath -->
	<path id="project.classpath">
		<pathelement location="${source.output.dir}" />
		<pathelement location="${tests.output.dir}" />
		<pathelement location="${gwt.dir}/gwt-user.jar" />
		<fileset dir="${gwt.dir}" includes="gwt-dev*.jar" />
		<!-- Add any additional non-server libs (such as JUnit) -->
		<fileset dir="war/WEB-INF/lib" includes="**/*.jar" />
		<path refid="extern.jUnit.classpath" />
	</path>

	<path id="project.libs.classpath">
		<fileset dir="war/WEB-INF/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<property name="emma.dir" value="${extern.dir}/emma" />

	<path id="emma.lib">
		<pathelement location="${emma.dir}/emma.jar" />
		<pathelement location="${emma.dir}/emma_ant.jar" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<!-- Task definitions -->
	<taskdef resource="checkstyletask.properties" classpathref="extern.classpath" />
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="extern.classpath" />
	<taskdef resource="tasks.properties" classpathref="extern.cobertura.classpath" />

	<target name="libs" description="Copy libs to WEB-INF/lib">
		<mkdir dir="war/WEB-INF/lib" />
		<copy todir="war/WEB-INF/lib" file="${gwt.dir}/gwt-servlet.jar" />
		<copy todir="war/WEB-INF/lib" file="${gwt.dir}/gwt-servlet-deps.jar" />
		<!-- Add any additional server libs that need to be copied -->
	</target>

	<target name="javac" depends="libs" description="Compile java source to bytecode">
		<mkdir dir="${source.output.dir}" />
		<javac srcdir="${source.dir}" includes="**" encoding="utf-8" destdir="${source.output.dir}" nowarn="true" debug="true" debuglevel="lines,vars,source" includeantruntime="true">
			<classpath refid="project.classpath" />
			<compilerarg value="-Xlint" />
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:-serial" />
		</javac>
		<copy todir="${source.output.dir}">
			<fileset dir="${source.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="gwtc" depends="javac" description="GWT compile to JavaScript (production mode)">
		<echo>Okay, let us build some javascript files!</echo>
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${source.dir}" />
				<path refid="project.classpath" />
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA.jar" />
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA-sources.jar" />
			</classpath>
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx512M" />
			<jvmarg value="-Xss16M" />
			<arg line="-war" />
			<arg value="war" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="fhdw.ipscrum.IpScrum" />
		</java>
	</target>

	<target name="devmode" depends="javac" description="Run development mode">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
			<classpath>
				<pathelement location="${source.dir}" />
				<path refid="project.classpath" />
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA.jar" />
				<pathelement location="${gwt.dir}/validation-api-1.0.0.GA-sources.jar" />
			</classpath>
			<jvmarg value="-Xmx256M" />
			<arg value="-startupUrl" />
			<arg value="IpScrum.html" />
			<arg line="-war" />
			<arg value="war" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="fhdw.ipscrum.IpScrum" />
		</java>
	</target>

	<target name="build" depends="gwtc" description="Build this project" />

	<target name="war" depends="build" description="Create a war file">
		<zip destfile="IpScrum.war" basedir="war" />
	</target>

	<target name="clean" description="Cleans this project">
		<delete dir="${reports.dir}" includeemptydirs="true" />

	</target>
	<target name="cleanCompiled" description="Cleans up the compiled files">
		<echo>Cleaning up the compiled class files!</echo>
		<delete dir="${source.output.dir}" failonerror="false" includeemptydirs="true" />
		<delete dir="war/ipscrum" failonerror="false" includeemptydirs="true" />
		<delete dir="${tests.output.dir}" includeemptydirs="true" />
		<delete dir="${coverage.output.dir}" includeemptydirs="true" />
	</target>

	<target name="javadoc" description="Generates the javadoc documentation">
		<javadoc destdir="${javadoc.dir}" access="private" use="true" encoding="${source.encoding}" docencoding="${source.encoding}" maxmemory="128M" windowtitle="IpScrum">
			<fileset dir="${source.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${tests.dir}">
				<include name="**/*.java" />
			</fileset>
			<classpath refid="project.classpath" />
		</javadoc>
	</target>


	<target name="testc" depends="javac">
		<mkdir dir="${tests.output.dir}" />
		<javac destdir="${tests.output.dir}" source="1.6" target="1.6" debug="true" encoding="${source.encoding}" includeantruntime="false">
			<compilerarg value="-Xlint" />
			<compilerarg value="-Xlint:-path" />
			<compilerarg value="-Xlint:-serial" />
			<classpath refid="project.classpath" />
			<src path="${tests.dir}" />
		</javac>
	</target>

	<target name="cobertura-test" depends="testc" description="Runs the JUnit testcases">
		<delete dir="${coverage.output.dir}" includeemptydirs="true" />
		<cobertura-instrument todir="${coverage.output.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${source.output.dir}">
				<include name="**/*.class" />
				<exclude name="fhdw/ipscrum/client/**/*.class" />
				<!-- Service layer has to be tested with GWTJunit -->
				<exclude name="fhdw/ipscrum/server/services/**/*.class" />
				<exclude name="fhdw/ipscrum/server/session/**/*.class" />
				<exclude name="fhdw/ipscrum/shared/model/visitor/**/*.class" />
				<!-- Search criteria are not implemented yet -->
				<exclude name="fhdw/ipscrum/shared/model/metamodel/search/criteria/**/*.class" />
				<exclude name="fhdw/ipscrum/shared/constants/TextConstantsForLists*.class" />
			</fileset>
		</cobertura-instrument>

		<mkdir dir="${junit.report.dir}" />
		<junit fork="true" forkmode="once" showoutput="on" dir="${basedir}">
			<jvmarg value="-Xss2M" />
			<jvmarg value="-Xms64m" />
			<jvmarg value="-Xmx784m" />
			<assertions>
				<enable />
			</assertions>
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />
			<classpath>
				<pathelement location="${coverage.output.dir}" />
				<path refid="project.classpath" />
				<path refid="extern.cobertura.classpath" />
			</classpath>
			<formatter type="${junit.report.format}" />
			<batchtest haltonfailure="false" haltonerror="false" todir="${junit.report.dir}">
				<fileset dir="test-classes" includes="**/TestAllIpScrum.class" />
			</batchtest>
		</junit>
		<cobertura-report format="${cobertura.report.format}" destdir="${cobertura.report.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${source.dir}">
				<include name="**/*.java" />
				<exclude name="fhdw/ipscrum/client/**/*.java" />
				<!-- Service layer has to be tested with GWTJunit -->
				<exclude name="fhdw/ipscrum/server/services/**/*.java" />
				<exclude name="fhdw/ipscrum/server/session/**/*.java" />
				<exclude name="fhdw/ipscrum/shared/model/visitor/**/*.java" />
				<!-- Search criteria are not implemented yet -->
				<exclude name="fhdw/ipscrum/shared/model/metamodel/search/criteria/**/*.java" />
				<exclude name="fhdw/ipscrum/shared/constants/TextConstantsForLists.java" />
			</fileset>
		</cobertura-report>
	</target>

	<target name="test" depends="javac,testc" description="Runs the JUnit testcases">
		<mkdir dir="${junit.report.dir}" />
		<junit fork="true" forkmode="once" dir="${basedir}">
			<jvmarg value="-Xss2M" />
			<jvmarg value="-Xms64m" />
			<jvmarg value="-Xmx512m" />
			<assertions>
				<enable />
			</assertions>
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<formatter type="${junit.report.format}" />
			<batchtest haltonfailure="false" haltonerror="false" todir="${junit.report.dir}">
				<fileset dir="test-classes" includes="**/TestAllIpScrum.class" />
			</batchtest>
		</junit>
	</target>

	<target name="emma-test" depends="testc" description="Runs the JUnit testcases">
		<delete dir="${coverage.output.dir}" includeemptydirs="true" />
		<emma>
			<instr instrpath="${source.output.dir}" destdir="${coverage.output.dir}" metadatafile="${coverage.output.dir}/metadata.emma" merge="true" mode="copy">
				<filter excludes="fhdw.ipscrum.client.*" />
			</instr>
		</emma>

		<mkdir dir="${junit.report.dir}" />
		<junit fork="true" forkmode="once" dir="${basedir}">
			<jvmarg value="-Xss2M" />
			<jvmarg value="-Xms64m" />
			<jvmarg value="-Xmx512m" />
			<assertions>
				<enable />
			</assertions>
			<classpath>
				<pathelement location="${coverage.output.dir}" />
				<path refid="project.classpath" />
				<path refid="emma.lib" />
			</classpath>
			<formatter type="${junit.report.format}" />
			<jvmarg value="-Demma.coverage.out.file=${coverage.output.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
			<batchtest haltonfailure="false" haltonerror="false" todir="${junit.report.dir}">
				<fileset dir="${tests.output.dir}" includes="**/TestAllIpScrum.class" />
			</batchtest>
		</junit>

		<emma>
			<report sourcepath="${source.dir}">
				<fileset dir="${coverage.output.dir}">
					<include name="*.emma" />
				</fileset>
				<xml outfile="${cobertura.report.dir}/emma.xml" />
			</report>
		</emma>
	</target>

	<target name="checkstyle_src" description="Executes checkstyle-analysis for the application.">
		<mkdir dir="${checkstyle.report.dir}" />
		<checkstyle config="${checkstyle.config.dir}/checkstyle.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="${checkstyle.report.format}" tofile="${checkstyle.report.dir}/checkstyle_result_src.xml" />
			<fileset dir="${source.dir}">
				<include name="**/*.java" />
				<exclude name="fhdw/ipscrum/client/view/**/*.java" />
				<exclude name="fhdw/ipscrum/client/architecture/widgets/**/*.java" />
			</fileset>
			<classpath refid="project.classpath" />
		</checkstyle>
		<checkstyle config="${checkstyle.config.dir}/checkstyle-view.xml" failureproperty="checkstyle.failure" failonviolation="false">
			<formatter type="${checkstyle.report.format}" tofile="${checkstyle.report.dir}/checkstyle_result_view.xml" />
			<fileset dir="${source.dir}">
				<include name="fhdw/ipscrum/client/view/**/*.java" />
				<include name="fhdw/ipscrum/client/architecture/widgets/**/*.java" />
			</fileset>
		</checkstyle>
	</target>

	<target name="checkstyle_test" description="Executes checkstyle-analysis for the testcases.">
		<mkdir dir="${checkstyle.report.dir}" />
		<checkstyle config="${checkstyle.config.dir}/checkstyle-test.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="${checkstyle.report.format}" tofile="${checkstyle.report.dir}/checkstyle_result_test.xml" />
			<fileset dir="${tests.dir}">
				<include name="**/*.java" />
			</fileset>
			<classpath refid="project.classpath" />
		</checkstyle>
	</target>

	<target name="checkstyle" depends="checkstyle_src,checkstyle_test" description="Executes all checkstyle-analysises">
		<java classname="MergeXmlFiles">
			<arg value="${checkstyle.report.dir}/checkstyle_result_src.xml" />
			<arg value="${checkstyle.report.dir}/checkstyle_result_view.xml" />
			<arg value="${checkstyle.report.dir}/checkstyle_result_test.xml" />
			<arg value="${checkstyle.report.dir}/checkstyle_result.xml" />
			<classpath>
				<fileset dir="${xmlmerge.dir}">
					<include name="xmlmerge.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="findbugs" depends="javac, testc" description="Executes the findBugs analysis">
		<mkdir dir="${findbugs.report.dir}" />
		<findbugs jvmargs="-Xmx512M" home="${findbugs.dir}" output="${findbugs.report.format}" outputFile="${findbugs.report.dir}/findbugs.xml">
			<class location="${source.output.dir}" />
			<class location="${tests.output.dir}" />
			<auxclasspath refid="project.classpath" />
			<sourcepath location="${source.dir}" />
			<sourcepath location="${tests.dir}" />
		</findbugs>
	</target>

	<target name="analyze" depends="cobertura-test, checkstyle, findbugs" description="Compiles the java code and execudes all analysis tools and testcases" />

	<target name="all" depends="cleanCompiled, build, analyze, javadoc" description="builds the whole project and generates analyze and test reports" />

</project>
